version: "3"
services:

  redis:
    image: redis:alpine
    ports:
      - "6379"
    networks:
      - frontend
    deploy:
      replicas: 2
      update_config:
        parallelism: 2
        delay: 10s
      restart_policy:
        condition: on-failure

  db:
    image: postgres:9.4
    volumes:
      - db-data:/var/lib/postgresql/data
    networks:
      - backend
    deploy:
      placement:
        constraints: [node.role == manager]

  vote:
    image: dockersamples/examplevotingapp_vote:before
    ports:
      - 5000:80
    networks:
      - frontend
    depends_on:
      - redis
    deploy:
      replicas: 2
      update_config:
        parallelism: 2
      restart_policy:
        condition: on-failure

  result:
    image: dockersamples/examplevotingapp_result:before
    ports:
      - 5001:80
    networks:
      - backend
    depends_on:
      - db
    deploy:
      replicas: 1
      update_config:
        parallelism: 2
        delay: 10s
      restart_policy:
        condition: on-failure

  worker:
    image: dockersamples/examplevotingapp_worker
    networks:
      - frontend
      - backend
    deploy:
      mode: replicated
      replicas: 1
      labels: [APP=VOTING]
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
        window: 120s
      placement:
        constraints: [node.role == manager]

  visualizer:
    image: dockersamples/visualizer:stable
    ports:
      - "8080:8080"
    stop_grace_period: 1m30s
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    deploy:
      placement:
        constraints: [node.role == manager]

networks:
  frontend:                                       # 在docker swarm模式下，不写默认就是overlay
  backend:

volumes:
  db-data:




# stack 默认的network是overlay
# 不能通过build方式构建，必须通过image，所以需要先生成image，此例子用的是hub上的example
# cd labs\06-docker-swarm\example-vote-app
# docker stack deploy example --compose-file=docker-compose.yml    ## 创建一个名字为example的stack
# docker stack ls                    # 查看当前的service数量
# docker stack service example       # 查看具体service的的情况
# 验证：
# http://192.168.0.11:5000            # 投票
# http://192.168.0.11:5001            # 应该打不开，使用的angular.js 需要翻墙才可以，或者自己build一个image
# http://192.168.0.11:8080            # swarm的可视化工具
# docker service scale example_vote=3   # 扩容到3
# docker stack services example         # 查看example stack的情况
# http://192.168.0.11:8080            # swarm的可视化工具，就会把example_vote变成3
# docker stack rm example